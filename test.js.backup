var express = require('express');
var app = express();
var server = require('http').Server(app);
var io = require('socket.io')(server);
var GT511C3 = require('gt511c3');
var async = require('async');
var fs = require('fs');


app.use(express.static(__dirname + '/public'));

app.get('/test', function(req, res) {
  res.sendFile(__dirname + '/views/index.html');
});

var fps = new GT511C3('/dev/ttyAMA0', {
	baudrate: 115200
	//baudrate: 57600,
	//baudrate: 38400,
	//baudrate: 19200,
	//baudrate: 9600,
	//debug: true
});

function release(){
		fps.isPressFinger().then(function() {
			setTimeout(function(){
				release();
			}, 100);
		}, function(err) {
			identify();
		});
}

var enroll = 0;
function identify() {
  if(!enroll){
		fps.captureFinger(0)
			.then(function() {
				return fps.identify();
			})
			.then(function(ID) {
				display_emit(ID);
				release();
			}, function(err) {
					if(err == 4104){
				display_emit('mai incearca odata!');
						release();
					} else {
				  		setTimeout(function(){
						identify();
				                }, 100);
					}
			});
  }
}

function identify() {
  if(!enroll){
		fps.captureFinger(0)
			.then(function() {
				return fps.identify();
			})
			.then(function(ID) {
				console.log("identify: ID = " + ID);
				display_emit(ID);
				release();
			}, function(err) {
				console.log("identify err: " + fps.decodeError(err));
				setTimeout(function(){
					if(err == 4104){
				display_emit('mai incearca odata!');
						release();
					} else {
						identify();
					}
				}, 700);
			});
  }
}
function enroll(){
		fps.enrollStart(0).then(function() {
			console.log('enrollStart: ' + 0 + ' enroll started!');
		}, function(err) {
			console.log('enrollStart error: ' + fps.decodeError(err));
		});
}

fps.init().then(
	function() {
		isInit = true;
		console.log('init: OK!');
		console.log('firmware version: ' + fps.firmwareVersion);
		console.log('iso area max: ' + fps.isoAreaMaxSize);
		console.log('device serial number: ' + fps.deviceSerialNumber);
		fps.ledONOFF(1).then(function() {
			console.log('ledON: OK!');
		}, function(err) {
			console.log('ledON error: ' + fps.decodeError(err));
		});
                identify();
	},
	function(err) {
		console.log('init err: ' + fps.decodeError(err));
	}
);
function display_emit(display_id){
  io.sockets.in(room).emit('display_id', display_id);
}

var room='room';
io.sockets.on('connection', function(socket) {
    socket.join(room);
    console.log('connected');
  socket.on('disconnect', function() {
    console.log('disconnected');
  });
});

server.listen(80);
